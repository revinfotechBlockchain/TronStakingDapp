{"version":3,"sources":["commoncomponent/warning.js","commoncomponent/ErrorAlert.js","helper.js","component/Pages/transfer.js","component/Pages/stake.js","component/Pages/claim.js","component/Pages/refer.js","component/Pages/transform.js","Routes/routes.js","component/Header/index.js","component/Sidebar/index.js","component/Maincomponent/index.js","App.js","serviceWorker.js","index.js","config.js"],"names":["Warning","className","target","href","rel","style","color","to","src","alt","Component","ErrorAlert","props","class","title","callSuccessToast","message","ButterToast","raise","content","Crisp","scheme","Cinnamon","SCHEME_GREEN","callErrorToast","SCHEME_RED","timeout","customStyles","top","left","right","bottom","marginRight","transform","Transfer","handleToAddress","event","setState","toAddress","value","handleSendingAmount","Number","state","tokenBalance","sendingAmount","setMaxAmount","sendAmount","a","window","tronWeb","defaultAddress","solidityNode","host","length","base58","trc20ContractAddress","contractAddress","contract","at","transfer","send","result","hash","modalIsOpen","openModal","closeModal","copyCodeToClipboard","textArea","select","document","execCommand","fromAddress","walletBalance","dailyData","dataLoading","networkErrorAlert","hostError","console","log","process","setInterval","HOSTNETWORK","trx","getBalance","then","axios","get","API_ROOT","headers","TOKEN","res","data","catch","error","tokenbalance","balance","errorbalance","address","err","INTERVAL","this","HOSTNETWORKNAME","type","placeholder","onChange","aria-describedby","max","id","onClick","scope","sort","b","day","map","item","index","key","Date","toLocaleString","txid","amount","isOpen","onRequestClose","aria-hidden","role","ref","textarea","position","vertical","POS_UP","horizontal","POS_RIGHT","Stake","handleDateChange","date","stakeDate","stakeAmount","handleStake","parseInt","getTime","performStaking","closeStakeWithdrawModal","stakeWithdraModalOpen","closestakeWithdrawHash","stakeWithdrawhashOpen","handleCheckStake","loadingStakeDetails","stakeDetails","getStakeId","stakeId","stakeID","handleWithdrawSkate","getElementById","disabled","withdrawStakedTokens","stakeWithdrawHash","activeStakes","historyStakes","errorMsgActive","errorMsgHistory","setDate","getDate","stakeData","resActiveStakes","errorActiveStakes","resHistoryStakes","errorHistoryStakes","Fragment","selected","onCalendarClose","handleCalendarClose","onCalendarOpen","handleCalendarOpen","minDate","stakeBonus","finalAmount","stakeRate","stakeShares","bigPayDay","startDay","endDay","lastDay","height","width","StakeId","StakingStartTime","toLocaleDateString","StakingEndTime","StakerTokens","Shares","BigPayDay","Interest","Amount","TokenTransactionstatus","Claim","handleAddress","btcAddress","checkbtcAddress","checkBtcMessage","checkBtcStatus","status","generateUniqeString","uniqueString","openGenerateModal","generateModalOpen","closeGenerateModal","closeClaimHashModal","claimHashOpen","handleClaimValue","claimValue","getBtcBalance","btcBalance","claimBonus","handleClaimRyz","signatureStatus","BTCAddress","toString","claimHash","btcRewards","i","Day","BTCAmount","ClaimRYZ","defaultValue","Refer","input","closeReferralWithDraw","referralWithDrawOpen","withdrawReferral","referralAddress","withdraw","referralLink","post","withdrawStatus","withdrawMsg","response","ReferralAddress","getReferral","referralWithdrawHash","getRefferLink","errorMsgRefferLink","refferralHistory","errorMsgRefferHistory","errorMsgWithdraw","resRefferLink","errorRefferLink","resRefferHistory","errorRefferHistory","generateRefferLink","marginTop","UserAddress","Details","e","routes","path","component","openWithDrawModal","withdraModalOpen","closeWithDrawModal","openEnterWithDrawModal","enterWithdrawOpen","closeEnterWithDrawModal","getData","resAllTransform","yourRyz","yourTrx","el","push","YourTRX","YourRYZ","allTransform","getCurrententry","lastTransform","yourTotalRyz","yourTotalTrx","trxBalance","withdrawAmount","withdrawPurchasedToken","callValue","withdrawHash","withdrawHashOpen","closeWithdrawHashModal","closeEnterWithdrawHashModal","enterWithdrawHashOpen","handleEnterAmount","enterwithdrawAmount","handleEnterWithdrawAmount","purchaseTokens","enterWithdrawHash","countdownTimer","d","year","getFullYear","advanceDate","getMonth","months","countDownDate","now","timeleft","hours","Math","floor","minutes","seconds","countDownTimer","RYZAvailable","TotalTRX","RYZTRX","slice","reverse","reduce","number","ryz","closeEnterWithDrawMoadal","Header","showSidebar","preventDefault","display","name","data-toggle","data-target","aria-labelledby","data-dismiss","aria-label","Sidebar","hideSideBar","links","image","color_image","activeLink","defaultActive","location","pathname","link","handleClick","Maincomponent","route","exact","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","token","Buffer","from"],"mappings":"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","file":"static/js/main.070bf2a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Warning extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"alert-box d-flex justify-content-between flex-wrap\">\r\n                <span>\r\n                    <i className=\"material-icons align-middle alert-icon\">warning</i>\r\n                    RYZ requires the <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec\" rel=\"noopener noreferrer\" style={{color:'#ffbf00'}}>Tronlink extension</a> for Chrome to access the Tron network.\r\n                </span>\r\n                <Link to=\"#\">\r\n                    <img className=\"img-fluid\" src=\"/images/icon.png\" alt=\"icon\" />\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nconst ErrorAlert= (props) =>{\r\n        return (\r\n            <div class=\"alert alert-danger d-inline-block errorToast\">\r\n                <i className=\"material-icons align-middle alert-icon mr-2\">warning</i>\r\n                {props.title}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default ErrorAlert;","import React from 'react';\r\nimport ButterToast, { Cinnamon } from 'butter-toast';\r\n\r\n\r\nexport const callToast = (message) => {\r\n    ButterToast.raise({\r\n        content: <Cinnamon.Crisp scheme={Cinnamon.Crisp.SCHEME_BLUE}\r\n            content={() => <div>{message}</div>}\r\n            title=\"Notification\" />\r\n    });\r\n}\r\n\r\nexport const callSuccessToast = (message) => {\r\n    ButterToast.raise({\r\n        content: <Cinnamon.Crisp scheme={Cinnamon.Crisp.SCHEME_GREEN}\r\n            content={() => <div>{message}</div>}\r\n            title=\"Notification\" />\r\n    });\r\n}\r\n\r\nexport const callErrorToast = (message) => {\r\n    ButterToast.raise({\r\n        content: <Cinnamon.Crisp scheme={Cinnamon.Crisp.SCHEME_RED}\r\n            content={() => <div>{message}</div>}\r\n            title=\"Notification\"\r\n            timeout={50}\r\n            />\r\n           \r\n    });\r\n}","import React, { Component } from \"react\";\r\n//import { Link } from \"react-router-dom\";\r\nimport WarningComponent from \"../../commoncomponent/warning.js\";\r\nimport ErrorAlert from \"../../commoncomponent/ErrorAlert\";\r\nimport axios from \"axios\";\r\nimport { API_ROOT, TOKEN, INTERVAL, HOSTNETWORK, HOSTNETWORKNAME } from '../../config';\r\nimport { callErrorToast, callSuccessToast } from '../../helper';\r\nimport ButterToast, { POS_UP, POS_BOTTOM, POS_RIGHT } from 'butter-toast';\r\nimport Modal from 'react-modal';\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }\r\n};\r\n\r\n\r\nexport default class Transfer extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: '',\r\n            walletBalance: null,\r\n            dailyData: [],\r\n            tokenBalance: null,\r\n            dataLoading: true,\r\n            toAddress: '',\r\n            sendingAmount: '',\r\n            contractAddress: '',\r\n            modalIsOpen: false,\r\n            networkErrorAlert: false,\r\n            hostError: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"env var\", process.env.NODE_ENV);\r\n\r\n        window.setInterval(() => {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == HOSTNETWORK) {\r\n                this.setState({\r\n                    hostError: false,\r\n                })\r\n\r\n\r\n                if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n\r\n                    this.setState({\r\n                        fromAddress: window.tronWeb.defaultAddress.base58\r\n                    })\r\n\r\n\r\n                    // console.log(window.tronWeb);\r\n\r\n                    /** start get the trx balance */\r\n                    let balance = window.tronWeb.trx.getBalance(this.state.fromAddress);\r\n                    balance.then((result) => {\r\n                        this.setState({ walletBalance: result })\r\n                    })\r\n                    /** end */\r\n\r\n\r\n                    /** start get daily data based on the address */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getTokenTransactionsByAddress?address=' + this.state.fromAddress, {\r\n\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((res) => {\r\n                            this.setState({\r\n                                networkErrorAlert: false,\r\n                                dataLoading: false,\r\n                                dailyData: res.data.data\r\n                            })\r\n                        })\r\n                        .catch((error) => {\r\n                            this.setState({\r\n                                networkErrorAlert: true,\r\n                            })\r\n                        })\r\n                    /** end */\r\n\r\n                    /** start get token balance */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getTokenBalance?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((tokenbalance) => {\r\n                            this.setState({ tokenBalance: Number(tokenbalance.data.balance) })\r\n                        })\r\n                        .catch((errorbalance) => {\r\n                            console.error(errorbalance)\r\n                        })\r\n                    /** end */\r\n\r\n\r\n                    /** get contract address  */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getContractAddress?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((res) => {\r\n                            // console.log(\"contract address\", res.data.address);\r\n                            this.setState({ contractAddress: res.data.address })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n                }\r\n\r\n                else {\r\n                    console.log('still searching...')\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    hostError: true,\r\n                })\r\n            }\r\n        }, `${INTERVAL}`)\r\n    }\r\n\r\n\r\n    // setting toAddress\r\n    handleToAddress = (event) => {\r\n        this.setState({\r\n            toAddress: event.target.value,\r\n        })\r\n    }\r\n\r\n\r\n    // setting sending amount\r\n    handleSendingAmount = (event) => {\r\n\r\n        if (Number(event.target.value) > Number(this.state.tokenBalance)) {\r\n            return callErrorToast(\"Amount should not be more than avaliable balance.\");\r\n        } else {\r\n            this.setState({\r\n                sendingAmount: event.target.value,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // setting maximam amount \r\n    setMaxAmount = () => {\r\n        this.setState({\r\n            sendingAmount: this.state.tokenBalance\r\n        })\r\n    }\r\n\r\n\r\n    // transfer amount function\r\n    sendAmount = async () => {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == \"https://api.shasta.trongrid.io\") {\r\n            if (this.state.toAddress.length < 1) {\r\n                return callErrorToast(\"Please Enter recipient address.\");\r\n            }\r\n\r\n            if (Number(this.state.sendingAmount) < 1) {\r\n                return callErrorToast(\"Please Enter the amount more than 0.\");\r\n            }\r\n\r\n\r\n            else {\r\n                try {\r\n                    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                        const trc20ContractAddress = this.state.contractAddress; //contract address\r\n                        let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                        let result = await contract.transfer(this.state.toAddress, 1000000 * this.state.sendingAmount).send();// to address  // 0.0000001\r\n                        // console.log('result: ', result);\r\n                        this.setState({\r\n                            hash: result,\r\n                            modalIsOpen: true\r\n                        });\r\n\r\n                    }\r\n                } catch (err) {\r\n                    return callErrorToast(\"Transaction can not be processed!\");\r\n                }\r\n\r\n            }\r\n        } else {\r\n            return callErrorToast(\"Please change the  network.\")\r\n        }\r\n    }\r\n\r\n\r\n    // modal function \r\n    openModal = () => {\r\n        this.setState({ modalIsOpen: true });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        this.setState({ modalIsOpen: false });\r\n    }\r\n\r\n\r\n    // copy function \r\n    copyCodeToClipboard = () => {\r\n        const el = this.textArea\r\n        el.select()\r\n        document.execCommand(\"copy\")\r\n        return callSuccessToast(\"Copied Successfully!\");\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.state.hostError ?\r\n                    <div class=\"pageLoader d-flex align-items-center justify-content-center\">\r\n                        <div class=\"d-flex flex-column align-items-center\">\r\n                        <div class=\"sa\">\r\n                            <div class=\"sa-warning\">\r\n                            <div class=\"sa-warning-body\"></div>\r\n                            <div class=\"sa-warning-dot\"></div>\r\n                            </div>\r\n                            </div>\r\n                            <h5 class=\"text-center\">Please change the network to {HOSTNETWORKNAME}.</h5>\r\n                        </div>\r\n                    </div>\r\n                    : \"\"}\r\n\r\n                <div className=\"main-content sidebar-open\">\r\n\r\n                    {this.state.networkErrorAlert ?\r\n                        <ErrorAlert title=\"Error Retrieving Data !\" />\r\n                        : \"\"}\r\n\r\n                    {window?.tronWeb?.defaultAddress?.base58 ? null : <WarningComponent />}\r\n                    <div className=\"transform-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Transfer</h4>\r\n                        </div>\r\n                        <div className=\"card\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 mx-auto\">\r\n                                    <div className=\"input-wrap\">\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"text\" className=\"form-control\" placeholder=\"From Your Tron\" value={this.state.fromAddress} />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"text\" className=\"form-control\" placeholder=\"To Recipient Address\" value={this.state.toAddress} onChange={this.handleToAddress} />\r\n                                        </div>\r\n                                        <div className=\"input-group form-group\">\r\n                                            <input type=\"number\" className=\"form-control\" placeholder={this.state.tokenBalance ? \"Amount in RYZ available \" + this.state.tokenBalance : \"Fetching avaliable amount...\"} aria-describedby=\"max\" value={this.state.sendingAmount} onChange={this.handleSendingAmount} max={this.state.tokenBalance} />\r\n                                            <div className=\"input-group-append\">\r\n                                                <span className=\"input-group-text\" id=\"max\">\r\n                                                    <span className=\"prep-main\" onClick={this.setMaxAmount}>MAX</span>\r\n                                                    <span className=\"prep-head\">RYZ </span>\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <button type=\"button\" className=\"btn primary-btn w-100 btn-lg\" onClick={this.sendAmount}>SEND RYZ </button>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Daily Data</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive empty-table card \">\r\n\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Day</th>\r\n                                        <th scope=\"col\">Hash</th>\r\n                                        <th scope=\"col\">Address</th>\r\n                                        <th scope=\"col\">Amount</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody id=\"dailydata\" className=\"position-realtive\">\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.dailyData.length > 0) ? this.state.dailyData.sort((a, b) => b.day - a.day, {}).map((item, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{new Date(item.day).toLocaleString()}</td>\r\n                                                <td>{item.txid}</td>\r\n                                                <td>{item.address}</td>\r\n                                                <td>{item.amount}</td>\r\n                                            </tr>\r\n                                        )) : <tr><td className=\"no-data\">No Data Found</td></tr>\r\n\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        onRequestClose={this.closeModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeModal}>&times;</i>\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.hash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}><span>\r\n                                        <i className=\"material-icons input-icon align-middle mr-1\">content_copy</i>Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <ButterToast position={{ vertical: POS_UP, horizontal: POS_RIGHT }} />\r\n            </>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport WarningComponent from \"../../commoncomponent/warning.js\";\r\nimport axios from \"axios\";\r\nimport ErrorAlert from \"../../commoncomponent/ErrorAlert\";\r\nimport { API_ROOT, TOKEN, INTERVAL, HOSTNETWORK, HOSTNETWORKNAME } from '../../config';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { callErrorToast, callSuccessToast } from '../../helper';\r\nimport ButterToast, { POS_UP, POS_BOTTOM, POS_RIGHT } from 'butter-toast';\r\nimport Modal from 'react-modal';\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }\r\n};\r\n\r\n\r\nexport default class Stake extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: null,\r\n            activeStakes: [],\r\n            historyStakes: [],\r\n            errorMsgActive: null,\r\n            errorMsgHistory: null,\r\n            dataLoading: true,\r\n            stakeDate: new Date().setDate(new Date().getDate() + 1),\r\n            tokenbalance: null,\r\n            stakeAmount: '',\r\n            contractAddress: '',\r\n            hash: '',\r\n            modalIsOpen: false,\r\n            stakeData: '',\r\n            stakeDetails: [],\r\n            stakeWithdraModalOpen: false,\r\n            stakeWithdrawhashOpen: false,\r\n            stakeID: '',\r\n            stakeWithdrawHash: '',\r\n            loadingStakeDetails: false,\r\n            hostError: false,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == HOSTNETWORK) {\r\n                this.setState({\r\n                    hostError: false,\r\n                })\r\n\r\n                if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                    this.setState({\r\n                        fromAddress: window.tronWeb.defaultAddress.base58\r\n                    })\r\n\r\n                    /** start get token balance */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getTokenBalance?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((res) => {\r\n                            this.setState({ tokenBalance: Number(res.data.balance) })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.error(err)\r\n                        })\r\n                    /** end */\r\n\r\n\r\n                    /** Active stakes */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getActiveStakesByUserAddress?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((resActiveStakes) => {\r\n                            // console.log(\"active Stakes\", resActiveStakes);\r\n                            this.setState({\r\n                                activeStakes: resActiveStakes.data,\r\n                                dataLoading: false,\r\n                                networkErrorAlert: false,\r\n                            }, () => console.log(\"state\", this.state.activeStakes))\r\n                        })\r\n                        .catch((errorActiveStakes) => {\r\n                            console.log(errorActiveStakes);\r\n                            // callErrorToast(\"Error retreiving data\");\r\n                            this.setState({\r\n                                networkErrorAlert: true,\r\n                            })\r\n                        })\r\n                    /** end */\r\n\r\n\r\n                    /** History Stakes */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getStakeHistoryByUserAddress?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((resHistoryStakes) => {\r\n                            // console.log(\"history stakes\", resHistoryStakes);\r\n                            this.setState({ historyStakes: resHistoryStakes.data })\r\n                        })\r\n                        .catch((errorHistoryStakes) => {\r\n                            console.log(errorHistoryStakes);\r\n                        })\r\n                    /** end */\r\n\r\n                    /** get contract address  */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getContractAddress?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((res) => {\r\n                            this.setState({ contractAddress: res.data.address })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n\r\n                } else {\r\n                    console.log('still searching....')\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    hostError: true,\r\n                })\r\n            }\r\n\r\n        }, `${INTERVAL}`)\r\n\r\n    }\r\n\r\n\r\n    // setting date in picker \r\n    handleDateChange = (date) => {\r\n        this.setState({\r\n            stakeDate: date,\r\n        })\r\n    }\r\n\r\n    // setting sending amount\r\n    handleSendingAmount = (event) => {\r\n\r\n        if (Number(event.target.value) > Number(this.state.tokenBalance)) {\r\n            return callErrorToast(\"Amount should not be more than avaliable balance.\");\r\n        } else {\r\n            this.setState({\r\n                stakeAmount: event.target.value,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // setting maximam amount \r\n    setMaxAmount = () => {\r\n        this.setState({\r\n            stakeAmount: this.state.tokenBalance\r\n        })\r\n    }\r\n\r\n\r\n    handleStake = async () => {\r\n        // converting date into unix timestamp\r\n\r\n        if (Number(this.state.stakeAmount) < 2) {\r\n            return callErrorToast(\"Please Enter the amount more than 1.\");\r\n        }\r\n\r\n        if (!this.state.stakeDate) {\r\n            return callErrorToast(\"Please select the date.\");\r\n        }\r\n\r\n        else {\r\n            let stakeDate = parseInt(new Date(this.state.stakeDate).getTime() / 1000);\r\n\r\n            try {\r\n                if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                    const trc20ContractAddress = this.state.contractAddress //contract address\r\n                    let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                    let result = await contract.performStaking(this.state.stakeAmount * 1000000, stakeDate).send();// to address  // 0.0000001 //6 decimal limit \r\n                    this.setState({\r\n                        modalIsOpen: true,\r\n                        hash: result,\r\n                    });\r\n                }\r\n\r\n            } catch (err) {\r\n                return callErrorToast(\"Request can not be processed!\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // modal function \r\n    openModal = () => {\r\n        this.setState({ modalIsOpen: true });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        this.setState({ modalIsOpen: false });\r\n    }\r\n\r\n\r\n    closeStakeWithdrawModal = () => {\r\n        this.setState({ stakeWithdraModalOpen: false });\r\n    }\r\n\r\n    closestakeWithdrawHash = () => {\r\n        this.setState({ stakeWithdrawhashOpen: false });\r\n    }\r\n\r\n    // copy function \r\n    copyCodeToClipboard = () => {\r\n        const el = this.textArea\r\n        el.select()\r\n        document.execCommand(\"copy\")\r\n        return callSuccessToast(\"Copied Successfully!\");\r\n    }\r\n\r\n\r\n    // check stake\r\n\r\n    handleCheckStake = async () => {\r\n        this.setState({\r\n            loadingStakeDetails: true,\r\n        });\r\n\r\n\r\n\r\n        if (Number(this.state.stakeAmount) < 2) {\r\n            return callErrorToast(\"Please Enter the amount more than 1.\");\r\n        }\r\n\r\n        if (!this.state.stakeDate) {\r\n            return callErrorToast(\"Please select the date.\");\r\n        }\r\n\r\n\r\n        let stakeDate = parseInt(new Date(this.state.stakeDate).getTime() / 1000);\r\n\r\n        /** get contract address  */\r\n        await axios.get(`${API_ROOT}/api/tron/getStakeDetails?endTime=${stakeDate}&amount=${this.state.stakeAmount}`, {\r\n            headers: {\r\n                'Authorization': `Basic ${TOKEN}`,\r\n            },\r\n        })\r\n            .then((res) => {\r\n                // console.log(res);\r\n                this.setState({\r\n                    loadingStakeDetails: false,\r\n                    stakeDetails: res.data,\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    loadingStakeDetails: false,\r\n                })\r\n                console.error(err)\r\n            })\r\n    }\r\n\r\n\r\n\r\n    getStakeId = (stakeId, index) => {\r\n        this.setState({\r\n            stakeID: stakeId,\r\n            stakeWithdraModalOpen: true,\r\n        })\r\n    }\r\n\r\n\r\n    // withdraw stake\r\n    handleWithdrawSkate = async () => {\r\n\r\n        console.log(this.state.stakeID);\r\n\r\n        document.getElementById(this.state.stakeID).disabled = true;\r\n\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                const trc20ContractAddress = this.state.contractAddress; //contract address\r\n                let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                let result = await contract.withdrawStakedTokens(this.state.stakeID).send();\r\n\r\n                this.setState({\r\n                    stakeWithdrawHash: result,\r\n                    stakeWithdraModalOpen: false,\r\n                    stakeWithdrawhashOpen: true,\r\n                });\r\n\r\n            }\r\n\r\n        } catch (err) {\r\n            this.setState({\r\n                stakeWithdraModalOpen: false,\r\n            })\r\n            document.getElementById(this.state.stakeID).disabled = false;\r\n            return callErrorToast(\"Withdraw can not be processed!\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.hostError ?\r\n                    <div class=\"pageLoader d-flex align-items-center justify-content-center\">\r\n                        <div class=\"d-flex flex-column align-items-center\">\r\n                            <div class=\"sa\">\r\n                                <div class=\"sa-warning\">\r\n                                    <div class=\"sa-warning-body\"></div>\r\n                                    <div class=\"sa-warning-dot\"></div>\r\n                                </div>\r\n                            </div>\r\n                            <h5 class=\"text-center\">Please change the network to {HOSTNETWORKNAME}.</h5>\r\n                        </div>\r\n                    </div>\r\n                    : \"\"}\r\n                <div className=\"main-content sidebar-open stake-page\">\r\n                    {this.state.networkErrorAlert ?\r\n                        <ErrorAlert title=\"Error Retrieving Data !\" />\r\n                        : \"\"}\r\n                    {window?.tronWeb?.defaultAddress?.base58 ? null : <WarningComponent />}\r\n                    <div className=\"stake-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Stake</h4>\r\n                        </div>\r\n                        <div className=\"card stake-box\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-xl-7 mx-auto\">\r\n                                    <div className=\"input-wrap\">\r\n\r\n                                        <div className=\"input-group mb-39 flex-nowrap\">\r\n                                            <input type=\"number\" className=\"form-control\" placeholder={this.state.tokenBalance ? \"Amount in RYZ available \" + this.state.tokenBalance : \"Fetching avaliable amount...\"} aria-describedby=\"max\" value={this.state.stakeAmount} onChange={this.handleSendingAmount} />\r\n                                            <div className=\"input-group-append\">\r\n                                                <span className=\"input-group-text\" id=\"max\">\r\n                                                    <span className=\"prep-main\" onClick={this.setMaxAmount}>MAX</span>\r\n                                                    <span className=\"prep-head\">RYZ</span>\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"input-group mb-39 flex-nowrap\">\r\n                                            <DatePicker\r\n                                                selected={this.state.stakeDate}\r\n                                                onChange={this.handleDateChange}\r\n                                                onCalendarClose={this.handleCalendarClose}\r\n                                                onCalendarOpen={this.handleCalendarOpen}\r\n                                                minDate={new Date().setDate(new Date().getDate() + 1)}\r\n                                            />\r\n\r\n                                            <div className=\"input-group-append\">\r\n                                                <span className=\"input-group-text\" id=\"days\">\r\n                                                    <span className=\"prep-main\">\r\n                                                        <i className=\"material-icons align-middle\">\r\n                                                            event\r\n                                                            </i>\r\n                                                    </span>\r\n                                                    <span className=\"prep-head\">Days</span>\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                        </div>\r\n\r\n                                        <button className=\"btn dark-btn w-100 btn-lg mb-4\" onClick={this.handleCheckStake}>CHECK STAKE</button>\r\n                                        <button className=\"btn primary-btn w-100 btn-lg\" onClick={this.handleStake}>STAKE</button>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-xl-5\">\r\n                                    <div className=\"stakes-content\">\r\n                                        <p class=\"text-success-c f-14\">\r\n                                            * Click check stake button to view your stake details.\r\n                                        </p>\r\n\r\n                                        {this.state.loadingStakeDetails ? <p className=\"blink-soft text-warning font-weight-bolder\">Featching Data from Blockchain... </p> : \"\"}\r\n\r\n                                        <ul className=\"stakes-list\">\r\n                                            <li>\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Bonus Amount:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.stakeBonus ? this.state.stakeDetails.stakeBonus : \"0.000\"} RYZ</span>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Effective Amount:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.finalAmount ? this.state.stakeDetails.finalAmount : \"0.000\"} RYZ</span>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li className=\"mt-4\">\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Stake Rate:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.finalAmount ? this.state.stakeDetails.stakeRate : \"0.000\"}/RYZ</span>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Stake Share:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.stakeShares ? this.state.stakeDetails.stakeShares : \"0.000\"} RYZ</span>\r\n                                                </div>\r\n                                            </li>\r\n\r\n                                            <li className=\"mt-4\">\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Big Pay Day Bonus: </span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.bigPayDay ? this.state.stakeDetails.bigPayDay : \"0.000\"} RYZ</span>\r\n                                                </div>\r\n                                                <p class=\"mt-2 toolTipText\">* If stake is still open on BigPayDay</p>\r\n                                            </li>\r\n\r\n                                            <li className=\"mt-4\">\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Start Date:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.startDay ? this.state.stakeDetails.startDay : 0}</span>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">Last Share:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.endDay ? this.state.stakeDetails.lastDay : 0}</span>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                <div className=\"d-flex justify-content-between mb-2\">\r\n                                                    <span className=\"data-title\">End Date:</span>\r\n                                                    <span className=\"data-item\">{this.state.stakeDetails && this.state.stakeDetails.stakeBonus ? this.state.stakeDetails.endDay : 0}</span>\r\n                                                </div>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Active Stakes</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive empty-table card \">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">\r\n                                            Start Date\r\n                                        </th>\r\n                                        <th scope=\"col\">End Date</th>\r\n                                        <th scope=\"col\">Principal</th>\r\n                                        <th scope=\"col\">Shares</th>\r\n                                        <th scope=\"col\">BigPayDay\r\n                                        <Link to=\"\">\r\n                                                <img className=\"img-fluid ml-1\" src=\"/images/info-icon.png\" alt=\"info-icon\" height=\"14\" width=\"14\" />\r\n                                            </Link>\r\n                                        </th>\r\n                                        <th scope=\"col\">Intrest</th>\r\n                                        <th scope=\"col\">Final Value</th>\r\n                                        <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.activeStakes && this.state.activeStakes.length > 0) ? this.state.activeStakes.sort((a, b) => a.StakeId - b.StakeId, {}).map((item, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{new Date(item.StakingStartTime * 1000).toLocaleDateString()}</td>\r\n                                                <td>{new Date(item.StakingEndTime * 1000).toLocaleDateString()}</td>\r\n                                                <td>{item.StakerTokens}</td>\r\n                                                <td>{item.Shares}</td>\r\n                                                <td>{item.BigPayDay}</td>\r\n                                                <td>{item.Interest} %</td>\r\n                                                <td>{item.Amount}</td>\r\n                                                <td>{item.TokenTransactionstatus == \"false\" || !item.TokenTransactionstatus ?\r\n                                                    <button type=\"button\" className=\"btn-custom-grey\" onClick={() => this.getStakeId(item.StakeId)} id={item.StakeId}>Withdraw</button>\r\n                                                    : <span className=\"text-danger-c\">Stake Closed</span>}</td>\r\n                                            </tr>\r\n                                        )) : <tr><td className=\"no-data\">No Data Found</td></tr>\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"table-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Stake History</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive empty-table card \">\r\n\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">\r\n                                            Start Date\r\n                                        </th>\r\n                                        <th scope=\"col\">End Date</th>\r\n                                        <th scope=\"col\">Principal</th>\r\n                                        <th scope=\"col\">Shares</th>\r\n                                        <th scope=\"col\">BigPayDay\r\n                                        <Link to=\"\">\r\n                                                <img className=\"img-fluid ml-1\" src=\"/images/info-icon.png\" alt=\"info-icon\" height=\"14\" width=\"14\" />\r\n                                            </Link> </th>\r\n                                        <th scope=\"col\">Intrest</th>\r\n                                        <th scope=\"col\">Final Value</th>\r\n                                        <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.historyStakes && this.state.historyStakes.length > 0) ? this.state.historyStakes.sort((a, b) => a.StakeId - b.StakeId, {}).map((item, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{new Date(item.StakingStartTime * 1000).toLocaleDateString()}</td>\r\n                                                <td>{new Date(item.StakingEndTime * 1000).toLocaleDateString()}</td>\r\n                                                <td>{item.StakerTokens}</td>\r\n                                                <td>{item.Shares}</td>\r\n                                                <td>{item.BigPayDay}</td>\r\n                                                <td>{item.Interest} %</td>\r\n                                                <td>{item.Amount}</td>\r\n                                                <td>{item.TokenTransactionstatus == \"false\" || !item.TokenTransactionstatus ?\r\n                                                    <button type=\"button\" className=\"btn-custom-grey\" onClick={() => this.getStakeId(item.StakeId)} id={item.StakeId}>Withdraw</button>\r\n                                                    : <span className=\"text-danger-c\">Stake Closed</span>}</td>\r\n\r\n                                            </tr>\r\n                                        )) : <tr><td className=\"no-data\">No Data Found</td></tr>\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* stake request successfull hash modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        onRequestClose={this.closeModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeModal}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.hash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                {/* withdraw stake amount modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.stakeWithdraModalOpen}\r\n                        onRequestClose={this.closeStakeWithdrawModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"p-4\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close p-2\" onClick={this.closeStakeWithdrawModal}>&times;</i>\r\n                            <h2 className=\"mt-3 text-center\">Are you sure to withdraw this stake ?</h2>\r\n\r\n                            <div className=\"input-wrap mt-4 d-flex \">\r\n                                <button type=\"button\" className=\"btn dark-btn w-100 btn-lg mt-3 mx-2\" onClick={this.closeStakeWithdrawModal}>No</button>\r\n                                <button type=\"button\" className=\"btn primary-btn w-100 btn-lg mt-3 mx-2\" onClick={this.handleWithdrawSkate}>Yes</button>\r\n                            </div>\r\n\r\n                            <div class=\"alert alert-warning text-center mt-4 mx-2\" role=\"alert\">\r\n                                *Panalty may be applicable based on time.\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                {/* stake withdraw hash modal */}\r\n\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.stakeWithdrawhashOpen}\r\n                        onRequestClose={this.closestakeWithdrawHash}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closestakeWithdrawHash}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.stakeWithdrawHash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n                <ButterToast position={{ vertical: POS_UP, horizontal: POS_RIGHT }} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport WarningComponent from \"../../commoncomponent/warning\";\r\nimport axios from \"axios\";\r\nimport { API_ROOT, TOKEN, INTERVAL,HOSTNETWORK, HOSTNETWORKNAME } from '../../config';\r\nimport { callSuccessToast, callErrorToast } from '../../helper';\r\nimport ButterToast, { POS_UP, POS_RIGHT } from 'butter-toast';\r\nimport Modal from 'react-modal';\r\nimport ErrorAlert from \"../../commoncomponent/ErrorAlert\";\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n    }\r\n};\r\n\r\n\r\nexport default class Claim extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: '',\r\n            btcAddress: '',\r\n            checkBtcMessage: '',\r\n            checkBtcStatus: null,\r\n            btcRewards: null,\r\n            dataLoading: true,\r\n            generateModalOpen: false,\r\n            uniqueString: '',\r\n            claimValue: '',\r\n            btcBalance: '',\r\n            contractAddress: '',\r\n            claimHashOpen: false,\r\n            claimHash: '',\r\n            hostError: false,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == HOSTNETWORK) {\r\n                this.setState({\r\n                    hostError: false,\r\n                })\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n\r\n                this.setState({\r\n                    fromAddress: window.tronWeb.defaultAddress.base58\r\n                })\r\n\r\n                /** start get daily data based on the address */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getAllBTCRewardsByAddress?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n                        this.setState({\r\n                            btcRewards: res.data,\r\n                            dataLoading: false,\r\n                            networkErrorAlert: false,\r\n                        })\r\n                    })\r\n                    .catch((error) => {\r\n                        this.setState({\r\n                            networkErrorAlert: true,\r\n                        })\r\n                    })\r\n                /** end */\r\n\r\n\r\n                /** get contract address  */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getContractAddress?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n                        this.setState({ contractAddress: res.data.address })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n\r\n            }else {\r\n                console.log('still searching ...')\r\n            }\r\n        }else {\r\n            this.setState({\r\n                hostError: true,\r\n            })\r\n        }\r\n            \r\n        }, `${INTERVAL}`)\r\n\r\n    }\r\n\r\n\r\n    // getting btc value\r\n    handleAddress = (event) => {\r\n        this.setState({\r\n            btcAddress: event.target.value,\r\n        })\r\n    }\r\n\r\n\r\n    // check bitcoin address\r\n    checkbtcAddress = () => {\r\n        if (!this.state.btcAddress) {\r\n            return callErrorToast(\"Please Enter BTC Address\");\r\n        }\r\n\r\n        else {\r\n            axios.get(`${API_ROOT}` + '/api/tron/checkBTCAddress?address=' + this.state.btcAddress, {\r\n                headers: {\r\n                    'Authorization': `Basic ${TOKEN}`,\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    this.setState({\r\n                        checkBtcMessage: res.data.message,\r\n                        checkBtcStatus: res.data.status\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                })\r\n            /** end */\r\n        }\r\n    }\r\n\r\n\r\n    // generate unique key string\r\n\r\n    generateUniqeString = () => {\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                axios.get(`${API_ROOT}` + '/api/tron/genrateBitcoinMessage?address=' + this.state.btcAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n                        this.setState({\r\n                            uniqueString: res.data.message,\r\n                        })\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                    })\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Something went wrong.\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // modal function \r\n    openGenerateModal = () => {\r\n        this.setState({ generateModalOpen: true });\r\n    }\r\n\r\n\r\n    closeGenerateModal = () => {\r\n        this.setState({ generateModalOpen: false });\r\n    }\r\n\r\n    closeClaimHashModal = () => {\r\n        this.setState({ claimHashOpen: false });\r\n    }\r\n\r\n\r\n    // copy function \r\n    copyCodeToClipboard = () => {\r\n        const el = this.textArea\r\n        el.select()\r\n        document.execCommand(\"copy\")\r\n        return callSuccessToast(\"Copied Successfully!\");\r\n    }\r\n\r\n\r\n    handleClaimValue = (event) => {\r\n        this.setState({\r\n            claimValue: event.target.value,\r\n        })\r\n    }\r\n\r\n\r\n    // get btc balance  \r\n\r\n    getBtcBalance = () => {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n            /** start get daily data based on the address */\r\n            axios.get(`${API_ROOT}` + '/api/tron/getBTCBalance?address=' + this.state.btcAddress, {\r\n                headers: {\r\n                    'Authorization': `Basic ${TOKEN}`,\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    this.setState({\r\n                        btcBalance: res.data.message,\r\n                    }, () => this.claimBonus())\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error)\r\n                })\r\n        }\r\n        /** end */\r\n    }\r\n\r\n\r\n    // handle ryz\r\n    handleClaimRyz = () => {\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                axios.get(`${API_ROOT}/api/tron/validateBitcoinSignature?signature=${this.state.claimValue}&address=${this.state.btcAddress}`, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n                        this.setState({\r\n                            signatureStatus: res.data.status\r\n                        }, () => {\r\n                            if (this.state.signatureStatus) {\r\n                                this.getBtcBalance();\r\n                                callSuccessToast(\"Claim Processing...\");\r\n                            } else {\r\n                                callErrorToast(res.data.message);\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                    })\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Something went wrong.\")\r\n        }\r\n    }\r\n\r\n\r\n    // claim bonus funtion \r\n\r\n    claimBonus = async () => {\r\n\r\n        let BTCAddress = this.state.btcAddress.toString();\r\n        let btcBalance = this.state.btcBalance.toString();\r\n        console.log(BTCAddress, btcBalance);\r\n\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                const trc20ContractAddress = this.state.contractAddress; //contract address\r\n                console.log(\"Initiated\", trc20ContractAddress)\r\n                let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                let result = await contract.claimBonus(BTCAddress, btcBalance).send();\r\n                this.setState({\r\n                    claimHash: result,\r\n                    generateModalOpen: false,\r\n                    claimHashOpen: true,\r\n                })\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Request can not be processed!\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                      {this.state.hostError ?\r\n                    <div class=\"pageLoader d-flex align-items-center justify-content-center\">\r\n                        <div class=\"d-flex flex-column align-items-center\">\r\n                        <div class=\"sa\">\r\n                            <div class=\"sa-warning\">\r\n                            <div class=\"sa-warning-body\"></div>\r\n                            <div class=\"sa-warning-dot\"></div>\r\n                            </div>\r\n                            </div>\r\n                            <h5 class=\"text-center\">Please change the network to {HOSTNETWORKNAME}.</h5>\r\n                        </div>\r\n                    </div>\r\n                    : \"\"}\r\n                <div className=\"main-content sidebar-open claim-page\">\r\n                    {this.state.networkErrorAlert ?\r\n                        <ErrorAlert title=\"Error Retrieving Data !\" />\r\n                        : \"\"}\r\n\r\n                    {window?.tronWeb?.defaultAddress?.base58 ? null : <WarningComponent />}\r\n\r\n                    <div className=\"claim-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Claim</h4>\r\n                        </div>\r\n                        <div className=\"card\">\r\n                            <div className=\"content text-center mb-39\">\r\n                                <h4>Enter your bitcoin address to claim its UTXO. Each address can only be claimed once.</h4>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-lg-6 mx-auto\">\r\n                                    <div className=\"input-wrap\">\r\n                                        <div className=\"form-group mb-0 d-flex\">\r\n                                            <input type=\"text\" onChange={this.handleAddress} value={this.state.btcAddress} className=\"form-control\" placeholder=\"Bitcoin Address\" />\r\n                                            <button type=\"button\" onClick={this.checkbtcAddress} className=\"px-4 border-0 btn primary-btn btc-check\">CHECK</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {this.state.checkBtcMessage ?\r\n                                        <div className={this.state.checkBtcStatus ? \"alert alert-success text-center mt-3\" : \"alert alert-danger text-center mt-3\"}>\r\n                                            {this.state.checkBtcMessage}\r\n                                            {this.state.checkBtcStatus ? <a onClick={this.openGenerateModal} class=\"text-warning cursor-pointer\"> Click Here to claim.</a> : \"\"}\r\n                                        </div>\r\n                                        : ''}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Claim History</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive empty-table card \">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Day</th>\r\n                                        <th scope=\"col\">BTC Address</th>\r\n                                        <th scope=\"col\">Raw BTC</th>\r\n                                        <th scope=\"col\">Adjusted BTC</th>\r\n                                        <th scope=\"col\">Claimed RYZ</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.btcRewards && this.state.btcRewards.length > 0) ? this.state.btcRewards.map((i) =>\r\n                                            <tr>\r\n                                                {/* <td>{new Date(parseInt(i.day)).toLocaleString()}</td> */}\r\n                                                <td>{new Date(parseInt(i.Day)).toLocaleString()}</td>\r\n                                                <td>{i.BTCAddress}</td>\r\n                                                <td>{i.BTCAmount}</td>\r\n                                                <td>{i.BTCAmount}</td>\r\n                                                <td>{i.ClaimRYZ}</td>\r\n                                            </tr>\r\n                                        ) : <tr><td className=\"no-data\">No Data Found</td></tr>\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n                                </tbody>\r\n                            </table>\r\n                            {/* <div className=\"data-box\">\r\n                                <p className=\"no-data\">None</p>\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* generate message modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.generateModalOpen}\r\n                        onRequestClose={this.closeGenerateModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeGenerateModal}>&times;</i>\r\n                            <h3 className=\"text-center\">Generate Unique string to verify</h3>\r\n                            <button type=\"button\" className=\"btn primary-btn w-100 btn-lg mt-4\" onClick={this.generateUniqeString}>Generate</button>\r\n                            <div className=\"input-group my-3\">\r\n                                <input type=\"text\" className=\"form-control p-4\" placeholder=\"Generate unique string\" ref={(textarea) => this.textArea = textarea} defaultValue={this.state.uniqueString} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy</span></span>\r\n                                </div>\r\n                            </div>\r\n                            {this.state.uniqueString ?\r\n                                <>\r\n                                    <div class=\"alert alert-success\" role=\"alert\">\r\n                                        Copy the above string and generate signature from electron wallet with same btc address.\r\n                                    </div>\r\n\r\n                                    <h3 className=\"mt-4 text-center\">Paste unique string here to claim RYZ </h3>\r\n                                    <div className=\"input-group my-3\">\r\n                                        <input type=\"text\" className=\"form-control p-4\" placeholder=\"Claim RYZ\" value={this.state.claimValue} onChange={this.handleClaimValue} />\r\n\r\n                                    </div>\r\n                                    <button type=\"button\" className=\"btn primary-btn w-100 btn-lg mt-1\" onClick={this.handleClaimRyz}>Claim RYZ</button>\r\n                                </>\r\n                                : \"\"}\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                {/* claim hash modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.claimHashOpen}\r\n                        onRequestClose={this.closeClaimHashModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeClaimHashModal}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.claimHash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <ButterToast position={{ vertical: POS_UP, horizontal: POS_RIGHT }} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport WarningComponent from \"../../commoncomponent/warning\";\r\nimport axios from \"axios\";\r\nimport ErrorAlert from \"../../commoncomponent/ErrorAlert\";\r\nimport { API_ROOT, TOKEN, INTERVAL, HOSTNETWORK, HOSTNETWORKNAME } from '../../config';\r\nimport Modal from 'react-modal';\r\nimport { callErrorToast, callSuccessToast } from '../../helper';\r\nimport ButterToast, { POS_UP, POS_BOTTOM, POS_RIGHT } from 'butter-toast';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }\r\n};\r\n\r\nexport default class Refer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: null,\r\n            getRefferLink: null,\r\n            errorMsgRefferLink: null,\r\n            refferralHistory: [],\r\n            errorMsgRefferHistory: null,\r\n            dataLoading: true,\r\n            withdraw: null,\r\n            withdrawStatus: null,\r\n            errorMsgWithdraw: null,\r\n            modalIsOpen: false,\r\n            withdrawMsg: '',\r\n            contractAddress: '',\r\n            referralWithdrawHash: '',\r\n            referralAddress: '',\r\n            hostError: false,\r\n        }\r\n    }\r\n\r\n\r\n    generateRefferLink() {\r\n        /** start generate the referal link */\r\n        axios.get(`${API_ROOT}` + '/api/tron/getReferalLinkByAddress?address=' + this.state.fromAddress, {\r\n            headers: {\r\n                'Authorization': `Basic ${TOKEN}`,\r\n            },\r\n        })\r\n            .then((resRefferLink) => {\r\n                this.setState({ getRefferLink: resRefferLink.data.referralLink })\r\n            })\r\n            .catch((errorRefferLink) => {\r\n                console.log(errorRefferLink);\r\n                // this.setState({ errorMsgRefferLink: \"Error retreiving data\" })\r\n            })\r\n        /** end */\r\n    }\r\n\r\n\r\n    copyCodeToClipboard = () => {\r\n        const el = this.input\r\n        el.select()\r\n        document.execCommand(\"copy\")\r\n        return callSuccessToast(\"Copied Successfully!\");\r\n    }\r\n\r\n\r\n    /** end */\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == HOSTNETWORK) {\r\n                this.setState({\r\n                    hostError: false,\r\n                })\r\n                if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                    this.setState({\r\n                        fromAddress: window.tronWeb.defaultAddress.base58\r\n                    })\r\n\r\n                    /** start refferal history */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getReferralHistory?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((resRefferHistory) => {\r\n                            this.setState({\r\n                                networkErrorAlert: false,\r\n                                refferralHistory: resRefferHistory.data.response,\r\n                                dataLoading: false,\r\n                            })\r\n                        })\r\n                        .catch((errorRefferHistory) => {\r\n                            this.setState({\r\n                                networkErrorAlert: true,\r\n                            })\r\n                        })\r\n                    /** end */\r\n\r\n\r\n                    /** get contract address  */\r\n                    axios.get(`${API_ROOT}` + '/api/tron/getContractAddress?address=' + this.state.fromAddress, {\r\n                        headers: {\r\n                            'Authorization': `Basic ${TOKEN}`,\r\n                        },\r\n                    })\r\n                        .then((res) => {\r\n                            // console.log(\"contract address\", res.data.address);\r\n                            this.setState({ contractAddress: res.data.address })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        })\r\n                } else {\r\n                    console.log('still searching ...')\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    hostError: true,\r\n                })\r\n            }\r\n\r\n        }, `${INTERVAL}`)\r\n    }\r\n\r\n\r\n\r\n    // modal function \r\n    openModal = () => {\r\n        this.setState({ modalIsOpen: true });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        this.setState({ modalIsOpen: false });\r\n    }\r\n\r\n\r\n    closeReferralWithDraw = () => {\r\n        this.setState({ referralWithDrawOpen: false });\r\n    }\r\n\r\n    /** Withdraw refferal */\r\n    withdrawReferral = async () => {\r\n\r\n        console.log(this.state.referralAddress);\r\n\r\n        if (!this.state.withdraw) {\r\n            return callErrorToast(\"Please enter or copy refer link.\")\r\n        }\r\n\r\n        const data = {\r\n            address: this.state.fromAddress,\r\n            referralLink: this.state.withdraw\r\n        }\r\n\r\n        await axios.post(`${API_ROOT}` + '/api/tron/withdrawReferral', data, {\r\n            headers: {\r\n                'Authorization': `Basic ${TOKEN}`,\r\n            },\r\n        }).then((res) => {\r\n            // console.log(res)\r\n            this.setState({\r\n                withdrawStatus: res.data.status,\r\n                withdrawMsg: res.data.response,\r\n                referralAddress: res.data.ReferralAddress,\r\n            }, () => {\r\n                if (this.state.withdrawStatus) {\r\n                    this.getReferral();\r\n                } else {\r\n                    callErrorToast(res.data.response);\r\n                }\r\n            })\r\n        }).catch((err) => {\r\n            console.log(\"Invalid referral link.\");\r\n        })\r\n\r\n    }\r\n\r\n\r\n    // get referral withdraw\r\n    getReferral = async () => {\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                const trc20ContractAddress = this.state.contractAddress //contract address\r\n                let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                let result = await contract.withdrawReferral(this.state.referralAddress).send();\r\n\r\n                console.log(result);\r\n\r\n                this.setState({\r\n                    referralWithdrawHash: result,\r\n                    modalIsOpen: false,\r\n                    referralWithDrawOpen: true,\r\n                })\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Request can not be processed!\");\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.hostError ?\r\n                    <div class=\"pageLoader d-flex align-items-center justify-content-center\">\r\n                        <div class=\"d-flex flex-column align-items-center\">\r\n                            <div class=\"sa\">\r\n                                <div class=\"sa-warning\">\r\n                                    <div class=\"sa-warning-body\"></div>\r\n                                    <div class=\"sa-warning-dot\"></div>\r\n                                </div>\r\n                            </div>\r\n                            <h5 class=\"text-center\">Please change the network to {HOSTNETWORKNAME}.</h5>\r\n                        </div>\r\n                    </div>\r\n                    : \"\"}\r\n                <div className=\"main-content sidebar-open refer-page\">\r\n                    {this.state.networkErrorAlert ?\r\n                        <ErrorAlert title=\"Error Retrieving Data !\" />\r\n                        : \"\"}\r\n                    {window?.tronWeb?.defaultAddress?.base58 ? null : <WarningComponent />}\r\n                    <div className=\"refer-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Refer</h4>\r\n                        </div>\r\n                        <div className=\"card\">\r\n                            <div className=\"content text-center mb-39\">\r\n                                <h4>Generate referral link and share with friend to earn more rewards.\r\n                                <span className=\"d-block mt-2\">One link is applicable for one user only !!</span>\r\n                                </h4>\r\n                            </div>\r\n\r\n                            <div className=\"container\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-xl-7 mx-auto\">\r\n                                        <div className=\"input-wrap\">\r\n                                            <div className=\"input-group\">\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"Your Ryz Referral\" ref={(input) => this.input = input} defaultValue={this.state.getRefferLink} />\r\n                                                <div className=\"input-group-append\">\r\n                                                    <span onClick={() => this.copyCodeToClipboard()} className=\"input-group-text primary-color flex-row\" id=\"input-id\">\r\n                                                        <i className=\"material-icons input-icon align-middle\">\r\n                                                            content_copy\r\n                                            </i>\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <button type=\"button\" onClick={() => this.generateRefferLink()} className=\"btn primary-btn w-100 btn-lg\" style={{ marginTop: 30 }}>Generate Refferal Link</button>\r\n                                            <span className=\"d-block text-center mt-3\">First Time visitor, Already having refferal Link ?  <a className=\"text-warning cursor-pointer\" onClick={this.openModal}>WithDraw here</a></span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table-wrap mb-39\">\r\n                        <div className=\"heading\">\r\n                            <h4>Referral  History</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive empty-table card \">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Day</th>\r\n                                        <th scope=\"col\">Referring TRX Address</th>\r\n                                        <th scope=\"col\">Detail</th>\r\n                                        <th scope=\"col\">Awarded RYZ</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.refferralHistory && this.state.refferralHistory.length > 0) ? this.state.refferralHistory.map((item, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{item.Date}</td>\r\n                                                <td>{item.UserAddress}</td>\r\n                                                <td>{item.Details}</td>\r\n                                                <td>{item.Amount}</td>\r\n                                            </tr>\r\n                                        )) : <tr><td className=\"no-data\">No Data Found</td></tr>\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* already having referral link modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.modalIsOpen}\r\n                        onRequestClose={this.closeModal}\r\n                        style={customStyles}\r\n                    >\r\n                        <div className=\"p-4\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close p-2\" onClick={this.closeModal}>&times;</i>\r\n                            <h2 className=\"mt-3 text-center\">Withdraw Referral</h2>\r\n                            <div className=\"input-wrap mt-4 pt-1\">\r\n                                <div className=\"input-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"Paste refferal link here\"\r\n                                        onChange={(e) => this.setState({ withdraw: e.target.value })}\r\n                                    />\r\n                                </div>\r\n\r\n                                <button type=\"button\" onClick={() => this.withdrawReferral()} className=\"btn primary-btn w-100 btn-lg\" style={{ marginTop: 30 }}>Withdraw Refferal</button>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                {/* referral withdraw hash modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.referralWithDrawOpen}\r\n                        onRequestClose={this.closeReferralWithDraw}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeReferralWithDraw}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(input) => this.input = input} defaultValue={this.state.referralWithdrawHash} />\r\n\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <ButterToast position={{ vertical: POS_UP, horizontal: POS_RIGHT }} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport WarningComponent from \"../../commoncomponent/warning\";\r\nimport ErrorAlert from \"../../commoncomponent/ErrorAlert\";\r\nimport axios from \"axios\";\r\nimport { API_ROOT, TOKEN, INTERVAL, HOSTNETWORK, HOSTNETWORKNAME } from '../../config';\r\nimport Modal from 'react-modal';\r\nimport { callErrorToast, callSuccessToast } from '../../helper';\r\nimport ButterToast, { POS_UP, POS_BOTTOM, POS_RIGHT } from 'butter-toast';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }\r\n};\r\n\r\nexport default class Transform extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: null,\r\n            allTransform: [],\r\n            getCurrententry: null,\r\n            countdownTimer: null,\r\n            dataLoading: true,\r\n            lastTransform: [],\r\n            yourTotalTrx: [],\r\n            yourTotalRyz: [],\r\n            withdraModalOpen: false,\r\n            enterWithdrawOpen: false,\r\n            contractAddress: '',\r\n            tokenBalance: null,\r\n            enterwithdrawAmount: '',\r\n            withdrawHashOpen: false,\r\n            withdrawHash: '',\r\n            enterWithdrawHash: '',\r\n            enterWithdrawHashOpen: false,\r\n            networkErrorAlert: false,\r\n            trxBalance: '',\r\n            hostError: false,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    countDownTimer() {\r\n        var d = new Date();\r\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        var date = d.getDate() + 1;\r\n        var year = d.getFullYear()\r\n\r\n        var advanceDate = months[d.getMonth()] + ' ' + date + ',' + year + ' ' + '00:00:00';\r\n        var countDownDate = new Date(advanceDate).getTime();\r\n\r\n        // Run myfunc every second\r\n        var myfunc = setInterval(() => {\r\n            var now = new Date().getTime();\r\n            var timeleft = countDownDate - now;\r\n\r\n            // Calculating the days, hours, minutes and seconds left\r\n            var hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n            var minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));\r\n            var seconds = Math.floor((timeleft % (1000 * 60)) / 1000);\r\n            this.setState({\r\n                countdownTimer: hours + \"h:\" + minutes + \"m:\" + seconds + \"s\"\r\n            });\r\n            // if (timeleft < 0) {\r\n            //     this.setState({\r\n            //         countdownTimer: \"closed\"\r\n            //     });\r\n            //     clearInterval(myfunc);\r\n            // }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    // withdraw modal \r\n\r\n    openWithDrawModal = () => {\r\n        this.setState({ withdraModalOpen: true });\r\n    }\r\n\r\n\r\n    closeWithDrawModal = () => {\r\n        this.setState({ withdraModalOpen: false });\r\n    }\r\n\r\n\r\n    openEnterWithDrawModal = () => {\r\n        this.setState({ enterWithdrawOpen: true });\r\n    }\r\n\r\n\r\n    closeEnterWithDrawModal = () => {\r\n        this.setState({ enterWithdrawOpen: false });\r\n    }\r\n\r\n\r\n    // getting table address\r\n    getData = () => {\r\n        if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.solidityNode.host == HOSTNETWORK) {\r\n            this.setState({\r\n                hostError: false,\r\n            })\r\n\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                this.setState({\r\n                    fromAddress: window.tronWeb.defaultAddress.base58\r\n                })\r\n\r\n                /** start refferal history */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getAllTransformTableDataByAddress?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((resAllTransform) => {\r\n\r\n                        let yourRyz = [];\r\n                        let yourTrx = [];\r\n\r\n                        resAllTransform.data.map((el) => {\r\n                            yourTrx.push(Number(el.YourTRX));\r\n                            yourRyz.push(Number(el.YourRYZ));\r\n                        })\r\n\r\n                        this.setState({\r\n                            networkErrorAlert: false,\r\n                            allTransform: resAllTransform.data,\r\n                            getCurrententry: resAllTransform.data.length - 1,\r\n                            lastTransform: resAllTransform.data[resAllTransform.data.length - 1],\r\n                            dataLoading: false,\r\n                            yourTotalRyz: yourRyz,\r\n                            yourTotalTrx: yourTrx,\r\n                        });\r\n                    })\r\n\r\n                    .catch((error) => {\r\n                        this.setState({\r\n                            networkErrorAlert: true,\r\n                        })\r\n                    })\r\n\r\n\r\n                /** get contract address  */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getContractAddress?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n                        // console.log(\"contract address\", res.data.address);\r\n                        this.setState({ contractAddress: res.data.address })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.error(err)\r\n                    })\r\n                /** end */\r\n\r\n\r\n                /** start get token balance */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getTokenBalance?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n\r\n                        this.setState({ tokenBalance: Number(res.data.balance) })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n\r\n\r\n                /** start get token balance */\r\n                axios.get(`${API_ROOT}` + '/api/tron/getTrxBalance?address=' + this.state.fromAddress, {\r\n                    headers: {\r\n                        'Authorization': `Basic ${TOKEN}`,\r\n                    },\r\n                })\r\n                    .then((res) => {\r\n\r\n                        this.setState({ trxBalance: Number(res.data.balance) })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n\r\n\r\n                /** end */\r\n            } else {\r\n                console.log('still searching ...')\r\n            }\r\n        } else {\r\n            this.setState({\r\n                hostError: true,\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.getData();\r\n        }, `${INTERVAL}`)\r\n\r\n\r\n        /** Countdown timer */\r\n        this.countDownTimer();\r\n    }\r\n\r\n\r\n    // withdraw your ryz\r\n    withdrawAmount = async () => {\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                const trc20ContractAddress = this.state.contractAddress//contract address\r\n                let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                let result = await contract.withdrawPurchasedToken().send({ callValue: this.state.lastTransform.YourRYZ * 1000000 });\r\n                callSuccessToast(\"You had Successfully withdraw the amount.\");\r\n                this.setState({\r\n                    withdraModalOpen: false,\r\n                    withdrawHash: result,\r\n                    withdrawHashOpen: true,\r\n                });\r\n\r\n                this.getData();\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Request can not be processed!\");\r\n        }\r\n\r\n    }\r\n\r\n    // withdraw hash modal\r\n\r\n    closeWithdrawHashModal = () => {\r\n        this.setState({ withdrawHashOpen: false });\r\n    }\r\n\r\n    closeEnterWithdrawHashModal = () => {\r\n        this.setState({ enterWithdrawHashOpen: false });\r\n    }\r\n\r\n    // settting emter withdraw amount \r\n\r\n    handleEnterAmount = (event) => {\r\n        if (Number(event.target.value) > Number(this.state.trxBalance)) {\r\n            return callErrorToast(\"Amount should not be more than avaliable balance.\");\r\n        } else {\r\n            this.setState({\r\n                enterwithdrawAmount: event.target.value,\r\n            })\r\n        }\r\n    }\r\n\r\n    // setting maximam enter amount \r\n    setMaxAmount = () => {\r\n        this.setState({\r\n            enterwithdrawAmount: this.state.trxBalance,\r\n        })\r\n    }\r\n\r\n\r\n    // enter amount functionality\r\n\r\n    handleEnterWithdrawAmount = async () => {\r\n        if (!this.state.enterwithdrawAmount) {\r\n            return callErrorToast(\"Please the the amount.\");\r\n        }\r\n\r\n\r\n        if (Number(this.state.enterwithdrawAmount) < 1) {\r\n            return callErrorToast(\"Enter amount more than 0.\");\r\n        }\r\n\r\n        try {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\r\n                const trc20ContractAddress = this.state.contractAddress; //contract address\r\n                let contract = await window.tronWeb.contract().at(trc20ContractAddress);\r\n                let result = await contract.purchaseTokens().send({ callValue: this.state.enterwithdrawAmount * 1000000 });\r\n\r\n                callSuccessToast(\"You had Successfully withdraw the amount.\");\r\n\r\n                this.setState({\r\n                    enterWithdrawOpen: false,\r\n                    enterWithdrawHashOpen: true,\r\n                    enterWithdrawHash: result,\r\n                });\r\n\r\n                this.getData();\r\n\r\n\r\n            }\r\n\r\n        } catch (err) {\r\n            return callErrorToast(\"Request can not be processed!\");\r\n        }\r\n    }\r\n\r\n\r\n    // copy function \r\n    copyCodeToClipboard = () => {\r\n        const el = this.textArea\r\n        el.select()\r\n        document.execCommand(\"copy\")\r\n        return callSuccessToast(\"Copied Successfully!\");\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.hostError ?\r\n                    <div class=\"pageLoader d-flex align-items-center justify-content-center\">\r\n                        <div class=\"d-flex flex-column align-items-center\">\r\n                            <div class=\"sa\">\r\n                                <div class=\"sa-warning\">\r\n                                    <div class=\"sa-warning-body\"></div>\r\n                                    <div class=\"sa-warning-dot\"></div>\r\n                                </div>\r\n                            </div>\r\n                            <h5 class=\"text-center\">Please change the network to {HOSTNETWORKNAME}.</h5>\r\n                        </div>\r\n                    </div>\r\n                    : \"\"}\r\n                <div className=\"main-content sidebar-open transform-page\">\r\n                    {this.state.networkErrorAlert ?\r\n                        <ErrorAlert title=\"Error Retrieving Data !\" />\r\n                        : \"\"}\r\n\r\n                    {window?.tronWeb?.defaultAddress?.base58 ? null : <WarningComponent />}\r\n                    <div className=\"table-wrap mb-39 transfer-table\">\r\n                        <div className=\"heading\">\r\n                            <h4>Transform</h4>\r\n                        </div>\r\n                        <div className=\"table-responsive card\">\r\n                            <table className=\"table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th scope=\"col\">Day</th>\r\n                                        <th scope=\"col\">RYZ Available</th>\r\n                                        <th scope=\"col\">Total TRX</th>\r\n                                        <th scope=\"col\">RYZ/TRX</th>\r\n                                        <th scope=\"col\">Closing</th>\r\n                                        <th scope=\"col\">Your RYZ</th>\r\n                                        <th scope=\"col\">Your TRX</th>\r\n                                        <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {!this.state.dataLoading ?\r\n                                        <tr className=\"lastTransform\">\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.Day}/351</td>\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.RYZAvailable} RYZ</td>\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.TotalTRX} TRX</td>\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.RYZTRX} RYZ</td>\r\n                                            <td>{this.state.countdownTimer}</td>\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.YourRYZ} RYZ</td>\r\n                                            <td className> {this.state.lastTransform && this.state.lastTransform.YourTRX} TRX</td>\r\n                                            <td>{this.state.lastTransform && this.state.lastTransform.YourRYZ > 0 ?\r\n                                                <button type=\"button\" className=\"btn-custom-grey\" onClick={this.openWithDrawModal}>Withdraw</button> : <button type=\"button\" className=\"btn-custom-grey\" onClick={this.openEnterWithDrawModal}>Enter</button>}</td>\r\n                                        </tr>\r\n                                        : \"\"}\r\n\r\n                                    {!this.state.dataLoading ?\r\n                                        (this.state.allTransform && this.state.allTransform.length > 0) ? this.state.allTransform.slice(0, -1).reverse().map((item, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{item.Day}/351</td>\r\n                                                <td>{item.RYZAvailable} RYZ</td>\r\n                                                <td>{item.TotalTRX} TRX</td>\r\n                                                <td>{item.RYZTRX} RYZ</td>\r\n                                                <td>closed</td>\r\n                                                <td>{item.YourRYZ} RYZ</td>\r\n                                                <td className>{item.YourTRX} TRX</td>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        )) : \"No Data Found\"\r\n                                        : <tr><td className=\"p-0\">\r\n                                            <div className=\"loader\">\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <span></span>\r\n                                                <p className=\"pt-2 text-center\">Loading Data from Blockchain... </p>\r\n                                            </div></td></tr>}\r\n\r\n                                    <tr className=\"calculate-wrap\">\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td></td>\r\n\r\n                                        <td className=\"calcultate-item\">\r\n                                            <span className=\"ttl-title\">Total</span>\r\n                                        </td>\r\n                                        <td className=\"calcultate-item\">\r\n                                            <span className=\"amount\">\r\n                                                {this.state.yourTotalTrx.length > 1 && this.state.yourTotalTrx.reduce((trx, number) => trx + number)} RYZ</span>\r\n                                        </td>\r\n                                        <td className=\"calcultate-item\">\r\n                                            <span className=\"amount\">{this.state.yourTotalRyz.length > 1 && this.state.yourTotalRyz.reduce((ryz, number) => ryz + number)} TRX</span>\r\n                                        </td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* withdraw amount modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.withdraModalOpen}\r\n                        onRequestClose={this.closeWithDrawModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"p-4\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close p-2\" onClick={this.closeWithDrawModal}>&times;</i>\r\n                            <h2 className=\"mt-3 text-center\">Do you want to withdraw this amount ?</h2>\r\n\r\n                            <div className=\"input-wrap mt-4\">\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"number\" className=\"form-control inputDisabled\" value={this.state.lastTransform.YourRYZ} disabled />\r\n                                </div>\r\n\r\n                                <button type=\"button\" className=\"btn primary-btn w-100 btn-lg mt-3\" onClick={this.withdrawAmount}>Yes</button>\r\n                                <button type=\"button\" className=\"btn dark-btn w-100 btn-lg mt-3\" onClick={this.closeWithDrawModal}>No</button>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                {/* enter amount modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.enterWithdrawOpen}\r\n                        onRequestClose={this.closeEnterWithDrawMoadal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"p-4\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close p-2\" onClick={this.closeEnterWithDrawModal}>&times;</i>\r\n                            {/* <h2 className=\"mt-3 text-center\">Enter amount to withdraw</h2> */}\r\n\r\n                            <div className=\"input-wrap mt-4\">\r\n                                <label className=\"mb-3\">Amount in TRX ({this.state.trxBalance} TRX available)</label>\r\n                                {/* <div className=\"input-group\">\r\n                                    <input type=\"number\" className=\"form-control\" value={this.state.enterwithdrawAmount} onChange={this.handleEnterAmount} placeholder=\"Enter RYZ\" aria-describedby=\"max\" max={this.state.tokenBalance} />\r\n                                </div> */}\r\n\r\n                                <div className=\"input-group form-group\">\r\n                                    <input type=\"number\" className=\"form-control\" value={this.state.enterwithdrawAmount} onChange={this.handleEnterAmount} placeholder=\"Enter amount to Transform\" aria-describedby=\"max\" max={this.state.tokenBalance} />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text border-0\" id=\"max\">\r\n                                            <span className=\"prep-main\" onClick={this.setMaxAmount}>MAX</span>\r\n                                            <span className=\"prep-head\">TRX </span>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <button type=\"button\" className=\"btn primary-btn w-100 btn-lg\" onClick={this.handleEnterWithdrawAmount}>Enter</button>\r\n                                <button type=\"button\" className=\"btn dark-btn w-100 btn-lg mt-3\" onClick={this.closeEnterWithDrawModal}>Cancel</button>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                {/* withdraw hash modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.withdrawHashOpen}\r\n                        onRequestClose={this.closeWithdrawHashModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeWithdrawHashModal}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain..\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.withdrawHash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n\r\n\r\n                {/* enter withdraw hash modal */}\r\n                <div>\r\n                    <Modal\r\n                        isOpen={this.state.enterWithdrawHashOpen}\r\n                        onRequestClose={this.closeEnterWithdrawHashModal}\r\n                        style={customStyles}\r\n                    >\r\n\r\n                        <div className=\"modalContainer p-3 position-realtive\">\r\n                            <i aria-hidden=\"true\" className=\"position-absolute modal-close\" onClick={this.closeEnterWithdrawHashModal}>&times;</i>\r\n\r\n                            <div className=\"alert alert-success text-center font-weight-bold mt-4\" role=\"alert\">\r\n                                You request is executed on blockchain.\r\n                            </div>\r\n                            <div className=\"input-group mt-4 mb-3\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Hash\" ref={(textarea) => this.textArea = textarea} value={this.state.enterWithdrawHash} />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text d-flex align-items-center justify-content-center primary-btn px-3\" id=\"basic-addon2\" onClick={() => this.copyCodeToClipboard()}>\r\n                                        <span><i className=\"material-icons input-icon align-middle mr-1\">content_copy</i> Copy Hash</span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                <ButterToast position={{ vertical: POS_UP, horizontal: POS_RIGHT }} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import Transfer from '../component/Pages/transfer';\r\nimport Stake from '../component/Pages/stake';\r\nimport Claim from '../component/Pages/claim'\r\nimport Refer from '../component/Pages/refer';\r\nimport Transform from '../component/Pages/transform';\r\n\r\nconst routes = [\r\n\t{\r\n\t\tpath:'/',\r\n\t\tcomponent: Transfer\r\n\t},\r\n\t{\r\n\t\tpath:'/transfer',\r\n\t\tcomponent: Transfer\r\n\t},\r\n\t{\r\n\t\tpath:'/stake',\r\n\t\tcomponent: Stake\r\n\r\n\t},\r\n\t{\r\n\t\tpath:'/claim',\r\n\t\tcomponent: Claim\r\n\t},\r\n\t{\r\n\t\tpath:'/refer',\r\n\t\tcomponent: Refer\r\n\t},\r\n\t{\r\n\t\tpath:'/transform',\r\n\t\tcomponent: Transform\r\n\t}\r\n]\r\n\r\nexport default routes;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//import WalletImg from '../../'\r\nexport default class Header extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            fromAddress: null\r\n        }\r\n    }\r\n    showSidebar = (e) => {\r\n        e.preventDefault()\r\n        document.getElementById('mySidebar').style.display = 'block';\r\n    }\r\n\r\n    // loginTronlink(){\r\n\r\n    // }\r\n\r\n    componentDidMount() {\r\n        window.setInterval(() => {\r\n            if (window.tronWeb && window.tronWeb.defaultAddress && window.tronWeb.defaultAddress.base58) {\r\n                this.setState({\r\n                    fromAddress: window.tronWeb.defaultAddress.name\r\n                })\r\n            } else {\r\n                console.log('still searching...')\r\n                this.setState({\r\n                    fromAddress: ''\r\n                })\r\n            }\r\n        }, 2000)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <header className=\"main-header\">\r\n                    <nav className=\"navbar py-0\">\r\n                        <div className=\"left-widgets\">\r\n                            <div className=\"logo\">\r\n                                <Link className=\"logo-img\" to=\"/\">\r\n                                    <img className=\"img-fluid\" src=\"/images/logo.png\" alt=\"logo\" width=\"67\" height=\"78\" />\r\n                                </Link>\r\n                            </div>\r\n\r\n                            <Link to=\"#\" className=\"sideNav-icon\" onClick={this.showSidebar}>\r\n                                <i className=\"material-icons menu-icon\">\r\n                                    menu\r\n                        </i>\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"right-widget d-flex align-items-center\">\r\n                        {window?.tronWeb?.defaultAddress?.base58 ? <span className=\"d-flex align-items-center\"><img src=\"/images/wallet_image.png\" className=\"img-fluid mr-1\" width=\"25\"  /><span>{this.state.fromAddress}</span></span> : <button type=\"button\" className=\"btn secondary-bordered-btn\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n                                Sign In\r\n                    </button>\r\n                            }\r\n\r\n                        </div>\r\n                    </nav>\r\n                </header>\r\n                <div className=\"modal fade\" id=\"exampleModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content p-4 text-center\">\r\n                            <div className=\"modal-header pb-2\">\r\n                                <button type=\"button\" className=\"close p-0\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <i aria-hidden=\"true\">&times;</i>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body pt-2\">\r\n                                <h2 className=\"text-dark font-weight-bold mb-3\">Please Login in TronLink</h2>\r\n                                <p className=\"tron-extens my-4 text-dark\">Haven't installed TronLink yet?</p>\r\n                                <a href=\"https://chrome.google.com/webstore/detail/tronlink/ibnejdfjmmkpcnlpebklmnkoeoihofec\" target=\"_blank\"><button type=\"button\" className=\"btn secondary-btn\">Click Here</button></a>\r\n                            </div>\r\n                           \r\n        \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Sidebar extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            links: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Transfer\",\r\n                    to: \"/\",\r\n                    image:'/images/transfer-icon.png',\r\n                    color_image:'/images/transfer-color.png'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: \"Stake\",\r\n                    to: \"/stake\",\r\n                    image:'/images/stake.png',\r\n                    color_image:'/images/stake-color.png'\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: \"Claim\",\r\n                    to: \"/claim\",\r\n                    image:'/images/claim.png',\r\n                    color_image:'/images/claim-color.png'\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: \"Refer\",\r\n                    to: \"/refer\",\r\n                    image:'/images/reffer.png',\r\n                    color_image:'/images/reffer-color.png'\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: \"Transform\",\r\n                    to: \"/transform\",\r\n                    image:'/images/transform.png',\r\n                    color_image:'/images/transform-color.png'\r\n                }\r\n            ],\r\n            activeLink: null,\r\n            defaultActive:null\r\n        }\r\n    }\r\n    \r\n    handleClick(id){\r\n        this.setState({\r\n            activeLink:id,\r\n            defaultActive:\"\"\r\n        });\r\n    }\r\n    hideSideBar = (e) => {\r\n        e.preventDefault()\r\n        document.getElementById('mySidebar').style.display='none';\r\n    }\r\n    componentDidMount(){ \r\n        this.setState({\r\n            defaultActive:window.location.pathname\r\n        })\r\n    }\r\n    render(){\r\n        const { links, activeLink} = this.state;\r\n        \r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"sidebar\">\r\n                    <div className=\"navigation-left\"  id=\"mySidebar\">\r\n                        <Link className=\"sidenav-close\" to=\"#\" onClick={this.hideSideBar}>\r\n                            <i className=\"material-icons font-bold-600\">\r\n                            close\r\n                            </i>\r\n                        </Link>\r\n                        <ul className=\"nav flex-column\" >\r\n                            {\r\n                                links.map((link) =>\r\n                                    <li key={link.id} className=\"nav-item\" onClick={() => this.handleClick(link.id)}>\r\n                                        <Link className={\"nav-link\" +(link.id === activeLink?\" active\":(link.to == this.state.defaultActive)?\" active\":\"\")}  to={link.to}>\r\n                                            <div className=\"icon-wrap\">\r\n                                                <img className=\"img-fluid white-ico\" src={link.image} alt=\"nav-icon\" height=\"47\" width=\"65\" />\r\n                                                <img className=\"img-fluid color-ico\" src={link.color_image} alt=\"nav-icon\" height=\"47\" width=\"65\" />\r\n                                            </div>\r\n                                            <span className=\"nav-text\">{link.name}</span>\r\n                                        </Link>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport '../../App.css';\r\nimport routes from '../../Routes/routes';\r\nimport Header from '../Header';\r\nimport Sidebar from '../Sidebar';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\n\r\nexport default class Maincomponent extends Component{\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<Router>\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Header />\r\n            <Sidebar />\t\r\n\t\t\t\t\t\t<Switch>\r\n              {routes.map((route) => (\r\n                  <Route exact\r\n                    key={route.path}\r\n                    path={route.path}\r\n                    component={route.component}\r\n                  />\r\n                ))\r\n              }\r\n            </Switch>\t\r\n\t\t\t\t</>\t\r\n\t\t    </Router>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './scss/style.scss';\r\nimport Maincomponent from './component/Maincomponent';\r\n\r\nconst App = () => {\r\n  return(\r\n    <Maincomponent />\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// const API_BASE_URL = 'http://localhost:3000'\r\nconst API_BASE_URL = 'https://api.royalstarz.io/'\r\nconst username = 'IamYourUserName'\r\nconst password = 'IamYourPassword'\r\nconst token = Buffer.from(`${username}:${password}`, 'utf8').toString('base64')\r\nconst intervalTime = 2500;\r\n// const hostNetwork = process.env.NODE_ENV == \"development\" ? \"https://api.shasta.trongrid.io\" : \"https://api.trongrid.io\";\r\n// const hostNetworkName = process.env.NODE_ENV == \"development\" ? \"Testnet\" : \"Mainnet\";\r\n\r\n\r\nconst hostNetwork = \"https://api.shasta.trongrid.io\";\r\nconst hostNetworkName = \"Testnet\";\r\n\r\n\r\nexport const API_ROOT = `${API_BASE_URL}`;\r\nexport const TOKEN = `${token}`;\r\nexport const INTERVAL = `${intervalTime}`;\r\nexport const HOSTNETWORK = `${hostNetwork}`;\r\nexport const HOSTNETWORKNAME = `${hostNetworkName}`;"],"sourceRoot":""}